import { test, expect } from '@playwright/test';

test.describe('Boundary Values and Security Testing', () => {
  
  async function login(page, email = 'admin@eye-training.com', password = 'password') {
    await page.goto('http://127.0.0.1:8000/admin/login');
    await page.fill('input[type="email"]', email);
    await page.fill('input[type="password"]', password);
    await page.click('button[type="submit"]');
  }

  // 1. Ë™çË®º„ÉªË™çÂèØ„ÉÜ„Çπ„ÉàÔºà„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ôºâ
  test('Authentication and Authorization Tests', async ({ page }) => {
    console.log('üîê Testing authentication and authorization...');
    
    // Êú™Ë™çË®º„Åßadmin„Éö„Éº„Ç∏„Ç¢„ÇØ„Çª„Çπ
    console.log('Testing unauthenticated admin access...');
    const response = await page.goto('http://127.0.0.1:8000/admin/customers');
    
    if (page.url().includes('/login')) {
      console.log('‚úÖ Unauthenticated users redirected to login');
    } else {
      console.log('‚ùå Security issue: Unauthenticated access allowed');
    }
    
    // ÁÑ°Âäπ„Å™Ë™çË®ºÊÉÖÂ†±„Åß„É≠„Ç∞„Ç§„É≥Ë©¶Ë°å
    console.log('Testing invalid login credentials...');
    await page.goto('http://127.0.0.1:8000/admin/login');
    await page.fill('input[type="email"]', 'invalid@example.com');
    await page.fill('input[type="password"]', 'wrongpassword');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);
    
    if (page.url().includes('/login')) {
      console.log('‚úÖ Invalid credentials rejected');
    } else {
      console.log('‚ùå Security issue: Invalid credentials accepted');
    }
    
    // Ê≠£Â∏∏„É≠„Ç∞„Ç§„É≥„ÉÜ„Çπ„Éà
    console.log('Testing valid login...');
    await login(page);
    await page.waitForTimeout(5000);
    
    if (page.url().includes('/admin') && !page.url().includes('/login')) {
      console.log('‚úÖ Valid credentials accepted');
    } else {
      console.log('‚ùå Valid login failed');
    }
  });

  // 2. Â¢ÉÁïåÂÄ§„ÉÜ„Çπ„ÉàÔºàÊó•‰ªò„ÉªÊôÇÈñìÔºâ
  test('Date and Time Boundary Tests', async ({ page }) => {
    console.log('üìÖ Testing date and time boundaries...');
    
    await login(page);
    await page.waitForTimeout(5000);
    
    // ‰∫àÁ¥Ñ„Ç´„É¨„É≥„ÉÄ„Éº„ÅßÈÅéÂéª„ÉªÊú™Êù•„ÅÆÊó•‰ªò„ÉÜ„Çπ„Éà
    console.log('Testing calendar date boundaries...');
    try {
      await page.goto('http://127.0.0.1:8000/admin/reservation-calendars');
      await page.waitForLoadState('networkidle');
      await page.waitForTimeout(5000);
      
      // „Ç´„É¨„É≥„ÉÄ„Éº„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
      const calendarVisible = await page.locator('.fc').isVisible();
      if (calendarVisible) {
        console.log('‚úÖ Calendar loads properly');
        
        // ÈÅéÂéª„ÅÆÊó•‰ªò„Å´ÁßªÂãï„Åó„Å¶„Åø„ÇãÔºà„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å™„ÅÑ„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºâ
        const prevButton = page.locator('.fc-prev-button');
        if (await prevButton.isVisible()) {
          await prevButton.click();
          await page.waitForTimeout(2000);
          console.log('‚úÖ Past date navigation works');
        }
        
        // Êú™Êù•„ÅÆÊó•‰ªò„Å´ÁßªÂãï
        const nextButton = page.locator('.fc-next-button');
        if (await nextButton.isVisible()) {
          await nextButton.click();
          await nextButton.click();
          await page.waitForTimeout(2000);
          console.log('‚úÖ Future date navigation works');
        }
      } else {
        console.log('‚ö†Ô∏è Calendar not visible');
      }
    } catch (error) {
      console.log(`‚ùå Date boundary test failed: ${error.message}`);
    }
  });

  // 3. Â§ßÈáè„Éá„Éº„ÇøÂá¶ÁêÜ„ÉÜ„Çπ„Éà
  test('Large Data Handling Test', async ({ page }) => {
    console.log('üìä Testing large data handling...');
    
    await login(page);
    await page.waitForTimeout(5000);
    
    // È°ßÂÆ¢‰∏ÄË¶ß„Éö„Éº„Ç∏„ÅßÂ§ßÈáè„Éá„Éº„Çø„ÅÆË°®Á§∫„ÉÜ„Çπ„Éà
    console.log('Testing customer list with large dataset...');
    try {
      await page.goto('http://127.0.0.1:8000/admin/customers');
      await page.waitForLoadState('networkidle');
      
      const customerRows = await page.locator('.fi-ta-table tbody tr').count();
      console.log(`Customer rows loaded: ${customerRows}`);
      
      if (customerRows > 0) {
        console.log('‚úÖ Customer data loads properly');
        
        // „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥„ÅÆÁ¢∫Ë™ç
        const hasPagination = await page.locator('.fi-pagination').isVisible();
        if (hasPagination) {
          console.log('‚úÖ Pagination available for large datasets');
        }
      } else {
        console.log('‚ö†Ô∏è No customer data found');
      }
      
    } catch (error) {
      console.log(`‚ùå Large data test failed: ${error.message}`);
    }
    
    // ‰∫àÁ¥Ñ‰∏ÄË¶ß„Éö„Éº„Ç∏„Åß„ÅÆÂ§ßÈáè„Éá„Éº„Çø„ÉÜ„Çπ„Éà
    console.log('Testing reservation list with large dataset...');
    try {
      await page.goto('http://127.0.0.1:8000/admin/reservations');
      await page.waitForLoadState('networkidle');
      
      const reservationRows = await page.locator('.fi-ta-table tbody tr').count();
      console.log(`Reservation rows loaded: ${reservationRows}`);
      
      if (reservationRows > 0) {
        console.log('‚úÖ Reservation data loads properly');
      }
      
    } catch (error) {
      console.log(`‚ùå Reservation data test failed: ${error.message}`);
    }
  });

  // 4. „Çª„ÉÉ„Ç∑„Éß„É≥„ÉªCookie „ÉÜ„Çπ„Éà
  test('Session and Cookie Security Test', async ({ page }) => {
    console.log('üç™ Testing session and cookie security...');
    
    // „É≠„Ç∞„Ç§„É≥
    await login(page);
    await page.waitForTimeout(5000);
    
    if (page.url().includes('/admin') && !page.url().includes('/login')) {
      console.log('‚úÖ Login session established');
      
      // „Çª„ÉÉ„Ç∑„Éß„É≥ÊÉÖÂ†±„ÅÆÁ¢∫Ë™ç
      const cookies = await page.context().cookies();
      const sessionCookie = cookies.find(cookie => 
        cookie.name.includes('session') || cookie.name.includes('laravel_session')
      );
      
      if (sessionCookie) {
        console.log('‚úÖ Session cookie found');
        if (sessionCookie.httpOnly) {
          console.log('‚úÖ Session cookie is HttpOnly (secure)');
        } else {
          console.log('‚ö†Ô∏è Session cookie is not HttpOnly');
        }
      } else {
        console.log('‚ö†Ô∏è Session cookie not found');
      }
    }
    
    // „É≠„Ç∞„Ç¢„Ç¶„Éà„ÉÜ„Çπ„Éà
    console.log('Testing logout functionality...');
    try {
      // „É¶„Éº„Ç∂„Éº„É°„Éã„É•„Éº„ÇíÊé¢„Åô
      const userMenu = page.locator('[data-filament-dropdown-toggle]').first();
      if (await userMenu.isVisible()) {
        await userMenu.click();
        await page.waitForTimeout(1000);
        
        // „É≠„Ç∞„Ç¢„Ç¶„Éà„Éú„Çø„É≥„ÇíÊé¢„Åô
        const logoutButton = page.getByRole('menuitem', { name: /„É≠„Ç∞„Ç¢„Ç¶„Éà|logout|sign out/i });
        if (await logoutButton.isVisible()) {
          await logoutButton.click();
          await page.waitForTimeout(3000);
          
          if (page.url().includes('/login')) {
            console.log('‚úÖ Logout successful');
          } else {
            console.log('‚ö†Ô∏è Logout may not have worked properly');
          }
        } else {
          console.log('‚ö†Ô∏è Logout button not found');
        }
      } else {
        console.log('‚ö†Ô∏è User menu not found');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Logout test failed: ${error.message}`);
    }
  });

  // 5. „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Â¢ÉÁïå„ÉÜ„Çπ„Éà
  test('Error Handling Boundary Tests', async ({ page }) => {
    console.log('‚ö†Ô∏è Testing error handling boundaries...');
    
    await login(page);
    await page.waitForTimeout(5000);
    
    // Â≠òÂú®„Åó„Å™„ÅÑID„Åß„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÉÜ„Çπ„ÉàÔºàÊßò„ÄÖ„Å™„Éë„Çø„Éº„É≥Ôºâ
    const invalidIdTests = [
      { url: 'http://127.0.0.1:8000/admin/customers/0/edit', name: 'Zero ID' },
      { url: 'http://127.0.0.1:8000/admin/customers/-1/edit', name: 'Negative ID' },
      { url: 'http://127.0.0.1:8000/admin/customers/abc/edit', name: 'String ID' },
      { url: 'http://127.0.0.1:8000/admin/customers/999999999/edit', name: 'Very Large ID' }
    ];
    
    for (const testCase of invalidIdTests) {
      try {
        console.log(`Testing ${testCase.name}: ${testCase.url}`);
        const response = await page.goto(testCase.url);
        const status = response.status();
        
        if (status === 404) {
          console.log(`‚úÖ ${testCase.name} properly returns 404`);
        } else if (status >= 500) {
          console.log(`‚ùå ${testCase.name} returns 500 error - Status ${status}`);
        } else {
          console.log(`‚ö†Ô∏è ${testCase.name} unexpected status: ${status}`);
        }
      } catch (error) {
        console.log(`‚ùå ${testCase.name} test failed: ${error.message}`);
      }
    }
  });

  // 6. SQL Injection „ÉÜ„Çπ„ÉàÔºàÂü∫Êú¨ÁöÑ„Å™„ÉÅ„Çß„ÉÉ„ÇØÔºâ
  test('Basic SQL Injection Protection Test', async ({ page, request }) => {
    console.log('üõ°Ô∏è Testing basic SQL injection protection...');
    
    // „É≠„Ç∞„Ç§„É≥„Éï„Ç©„Éº„É†„Åß„ÅÆSQL„Ç§„É≥„Ç∏„Çß„ÇØ„Ç∑„Éß„É≥Ë©¶Ë°å
    console.log('Testing SQL injection in login form...');
    await page.goto('http://127.0.0.1:8000/admin/login');
    
    const sqlPayloads = [
      "admin@test.com' OR '1'='1",
      "admin@test.com'; DROP TABLE users; --",
      "admin@test.com' UNION SELECT * FROM users --"
    ];
    
    for (const payload of sqlPayloads) {
      try {
        await page.fill('input[type="email"]', payload);
        await page.fill('input[type="password"]', 'password');
        await page.click('button[type="submit"]');
        await page.waitForTimeout(3000);
        
        if (page.url().includes('/login')) {
          console.log(`‚úÖ SQL injection payload rejected: ${payload.substring(0, 30)}...`);
        } else {
          console.log(`‚ùå SECURITY RISK: SQL injection may have succeeded: ${payload.substring(0, 30)}...`);
        }
      } catch (error) {
        console.log(`‚úÖ SQL injection payload blocked by error: ${payload.substring(0, 30)}...`);
      }
    }
  });
});