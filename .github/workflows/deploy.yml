name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, mbstring, xml
      
      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
          npm ci
          npm run build
      
      - name: Create deployment archive
        run: |
          # Copy files to a temporary directory to avoid "file changed as we read it" error
          mkdir -p /tmp/deploy_temp
          rsync -av --progress . /tmp/deploy_temp \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.env' \
            --exclude '.github' \
            --exclude 'tests' \
            --exclude '*.pem' \
            --exclude '*.tar.gz' \
            --exclude 'storage/logs/*' \
            --exclude 'storage/framework/cache/*' \
            --exclude 'storage/framework/sessions/*' \
            --exclude 'storage/framework/views/*'
          
          # Create tarball from the copy
          cd /tmp && tar -czf deploy.tar.gz deploy_temp
          mv /tmp/deploy.tar.gz $GITHUB_WORKSPACE/deploy.tar.gz
      
      - name: Deploy to EC2
        env:
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          # Setup SSH key
          echo "$EC2_KEY" > key.pem
          chmod 600 key.pem
          
          # Transfer to EC2
          scp -o StrictHostKeyChecking=no -i key.pem deploy.tar.gz ubuntu@13.115.38.179:/tmp/
          
          # Deploy on EC2
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@13.115.38.179 'bash -s' << 'SCRIPT'
            set -e
            
            # Navigate to web directory
            cd /var/www/html
            
            # Backup current deployment
            if [ -d "current" ]; then
              sudo rm -rf backup_old 2>/dev/null || true
              sudo mv current backup_old
            fi
            
            # Create new deployment directory
            sudo mkdir -p current
            
            # Extract files (remove the deploy_temp directory level)
            cd /tmp
            tar -xzf deploy.tar.gz
            sudo mv deploy_temp/* /var/www/html/current/
            sudo mv deploy_temp/.[^.]* /var/www/html/current/ 2>/dev/null || true
            rm -rf deploy_temp
            
            # Change to deployment directory
            cd /var/www/html/current
            
            # Setup environment
            if [ -f /var/www/html/.env.production ]; then
              cp /var/www/html/.env.production .env
            else
              cp .env.example .env 2>/dev/null || true
            fi
            
            # Generate app key if needed
            if ! grep -q "^APP_KEY=base64:" .env; then
              php artisan key:generate --force
            fi
            
            # Create necessary directories
            mkdir -p storage/framework/{cache/data,sessions,views}
            mkdir -p storage/logs
            mkdir -p bootstrap/cache
            
            # Set permissions
            sudo chown -R www-data:www-data storage bootstrap/cache .env
            sudo chmod -R 775 storage bootstrap/cache
            sudo chmod 644 .env
            
            # Clear and rebuild caches
            sudo -u www-data php artisan config:clear
            sudo -u www-data php artisan cache:clear 2>/dev/null || true
            sudo -u www-data php artisan config:cache
            sudo -u www-data php artisan route:cache
            sudo -u www-data php artisan view:cache
            
            # Run migrations
            sudo -u www-data php artisan migrate --force
            
            # Create storage link
            sudo -u www-data php artisan storage:link --force
            
            # Restart services
            sudo systemctl reload php8.3-fpm
            sudo systemctl reload nginx
            
            # Cleanup
            rm /tmp/deploy.tar.gz
            
            echo "Deployment completed successfully!"
          SCRIPT
          
          # Cleanup
          rm key.pem
          rm deploy.tar.gz
