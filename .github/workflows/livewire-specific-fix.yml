name: Livewire Specific Fix

on:
  workflow_dispatch:

jobs:
  fix:
    runs-on: ubuntu-latest
    
    steps:
      - name: Fix Livewire update endpoint
        env:
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$EC2_KEY" > key.pem
          chmod 600 key.pem
          
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@13.115.38.179 << 'EOF'
            cd /var/www/html/current
            
            echo "=== Livewire Specific Fix ==="
            
            # 1. Livewireのミドルウェア設定確認
            echo "Checking Livewire config..."
            cat > check_livewire.php << 'SCRIPT'
            <?php
            require __DIR__.'/vendor/autoload.php';
            $app = require_once __DIR__.'/bootstrap/app.php';
            
            // Livewire設定確認
            echo "Livewire Update Endpoint: " . config('livewire.update_uri', '/livewire/update') . "\n";
            echo "Session Driver: " . config('session.driver') . "\n";
            echo "Cache Driver: " . config('cache.driver') . "\n";
            
            // CSRFトークン確認
            echo "CSRF Protection: " . (config('livewire.inject_csrf_token', true) ? 'ON' : 'OFF') . "\n";
            
            // Livewireコンポーネント登録確認
            $livewire = app('livewire');
            echo "Registered components:\n";
            foreach ($livewire->getComponentAliases() as $alias => $class) {
                echo "  - $alias => $class\n";
                if (strpos($alias, 'login') !== false || strpos($alias, 'auth') !== false) {
                    echo "    [LOGIN COMPONENT FOUND]\n";
                }
            }
            SCRIPT
            
            php check_livewire.php
            rm check_livewire.php
            
            # 2. セッションファイルの権限修正
            echo -e "\n=== Fixing Session Permissions ==="
            sudo rm -rf storage/framework/sessions/*
            sudo mkdir -p storage/framework/sessions
            sudo chown -R www-data:www-data storage/framework/sessions
            sudo chmod -R 777 storage/framework/sessions
            
            # 3. Livewire設定ファイル修正
            echo -e "\n=== Updating Livewire Config ==="
            if [ -f "config/livewire.php" ]; then
              # CSRFトークン無効化（一時的）
              sed -i "s/'inject_csrf_token' => true/'inject_csrf_token' => false/" config/livewire.php
              echo "CSRF injection disabled temporarily"
            fi
            
            # 4. ルートキャッシュクリア
            echo -e "\n=== Clearing Route Cache ==="
            php artisan route:clear
            php artisan route:cache
            
            # 5. Livewireのアセット再公開
            echo -e "\n=== Re-publishing Livewire Assets ==="
            php artisan vendor:publish --force --tag=livewire:assets
            php artisan vendor:publish --force --tag=livewire:config
            
            # 6. APP_KEY再生成（念のため）
            echo -e "\n=== Regenerating APP_KEY ==="
            php artisan key:generate --force
            
            # 7. 全キャッシュクリア
            echo -e "\n=== Full Cache Clear ==="
            php artisan optimize:clear
            rm -rf bootstrap/cache/*.php
            
            # 8. 権限最終調整
            echo -e "\n=== Final Permission Fix ==="
            sudo chown -R www-data:www-data .
            sudo chmod -R 755 .
            sudo chmod -R 777 storage bootstrap/cache
            
            # 9. サービス再起動
            echo -e "\n=== Restarting Services ==="
            sudo systemctl restart php8.3-fpm
            sudo systemctl restart nginx
            
            # 10. エラーログ確認
            echo -e "\n=== Recent Errors ==="
            tail -n 30 storage/logs/laravel.log 2>/dev/null | grep -i "livewire\|update\|500" || echo "No recent Livewire errors"
            
            # 11. テスト
            echo -e "\n=== Testing Livewire Update Endpoint ==="
            
            # セッションCookie取得
            RESPONSE=$(curl -c cookies.txt -s http://localhost/admin/login -o /dev/null -D -)
            CSRF=$(echo "$RESPONSE" | grep -i "set-cookie" | grep -oP 'XSRF-TOKEN=\K[^;]+' | head -1)
            SESSION=$(echo "$RESPONSE" | grep -i "set-cookie" | grep -oP 'laravel_session=\K[^;]+' | head -1)
            
            echo "CSRF Token: ${CSRF:0:20}..."
            echo "Session: ${SESSION:0:20}..."
            
            # Livewireエンドポイントテスト
            curl -X POST http://localhost/livewire/update \
              -H "Content-Type: application/json" \
              -H "X-CSRF-TOKEN: $CSRF" \
              -H "Cookie: XSRF-TOKEN=$CSRF; laravel_session=$SESSION" \
              -d '{"fingerprint":{"id":"test","name":"test"},"serverMemo":{},"updates":[]}' \
              -w "\nHTTP Status: %{http_code}\n" \
              -s | head -20
            
            rm -f cookies.txt
            
            echo -e "\n=== Fix Complete ==="
            echo "Please try accessing: http://13.115.38.179/admin/login"
            echo "If still failing, check browser console for JavaScript errors"
          EOF
          
          rm key.pem