name: Clean Install Production

on:
  workflow_dispatch:

jobs:
  clean-install:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Complete clean installation
        env:
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$EC2_KEY" > key.pem
          chmod 600 key.pem
          
          # 設定ファイルを転送
          scp -o StrictHostKeyChecking=no -i key.pem \
            .env.production \
            ubuntu@13.115.38.179:/tmp/.env.production
          
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i key.pem ubuntu@13.115.38.179 << 'SSHEOF'
            echo "================================"
            echo "STARTING CLEAN INSTALLATION"
            echo "================================"
            echo "Account: 273021981629"
            echo "Server: 13.115.38.179"
            echo "================================"
            
            # 1. 完全クリーンアップ
            echo ""
            echo "=== Step 1: Complete Cleanup ==="
            sudo systemctl stop nginx
            sudo systemctl stop php8.3-fpm
            
            # 既存のディレクトリを全て削除
            sudo rm -rf /var/www/html/*
            sudo rm -rf /var/www/html/.*
            
            # 新規ディレクトリ作成
            sudo mkdir -p /var/www/html
            sudo chown ubuntu:ubuntu /var/www/html
            
            echo "Cleanup complete"
            
            # 2. アプリケーションのクローン
            echo ""
            echo "=== Step 2: Clone Application ==="
            cd /var/www/html
            git clone https://github.com/Naoki-Takahashi0420/metore_system.git current
            cd current
            
            # 3. 環境設定
            echo ""
            echo "=== Step 3: Environment Setup ==="
            cp /tmp/.env.production .env
            
            # DB接続情報を正しく設定
            sed -i 's|APP_URL=.*|APP_URL=http://13.115.38.179|' .env
            sed -i 's/APP_DEBUG=.*/APP_DEBUG=false/' .env
            sed -i 's/CACHE_DRIVER=.*/CACHE_DRIVER=file/' .env
            sed -i 's/SESSION_DRIVER=.*/SESSION_DRIVER=file/' .env
            sed -i 's/QUEUE_CONNECTION=.*/QUEUE_CONNECTION=sync/' .env
            
            # 4. Composerインストール
            echo ""
            echo "=== Step 4: Composer Install ==="
            composer install --no-dev --optimize-autoloader
            
            # 5. ディレクトリ権限設定
            echo ""
            echo "=== Step 5: Set Permissions ==="
            sudo chown -R www-data:www-data /var/www/html/current
            sudo chmod -R 755 /var/www/html/current
            sudo chmod -R 775 storage
            sudo chmod -R 775 bootstrap/cache
            
            # 6. Laravel初期設定
            echo ""
            echo "=== Step 6: Laravel Setup ==="
            sudo -u www-data php artisan key:generate --force
            sudo -u www-data php artisan storage:link
            
            # 7. データベースマイグレーション
            echo ""
            echo "=== Step 7: Database Migration ==="
            sudo -u www-data php artisan migrate:fresh --force
            
            # 8. 管理者アカウント作成
            echo ""
            echo "=== Step 8: Create Admin User ==="
            sudo -u www-data php artisan tinker --execute="
              use App\Models\User;
              \$admin = User::create([
                'name' => 'Administrator',
                'email' => 'admin@xsyumeno.com',
                'password' => bcrypt('password'),
                'role' => 'superadmin',
                'is_active' => true,
                'email_verified_at' => now()
              ]);
              echo 'Admin created: ' . \$admin->email . ' (ID: ' . \$admin->id . ')';
            "
            
            # 9. アセット公開
            echo ""
            echo "=== Step 9: Publish Assets ==="
            sudo -u www-data php artisan vendor:publish --all --force
            sudo -u www-data php artisan filament:assets
            sudo -u www-data php artisan livewire:discover
            
            # 10. キャッシュ最適化
            echo ""
            echo "=== Step 10: Optimize Cache ==="
            sudo -u www-data php artisan config:cache
            sudo -u www-data php artisan route:cache
            sudo -u www-data php artisan view:cache
            
            # 11. Nginx設定確認
            echo ""
            echo "=== Step 11: Nginx Configuration ==="
            sudo tee /etc/nginx/sites-available/default > /dev/null << 'NGINX'
            server {
                listen 80 default_server;
                listen [::]:80 default_server;
                server_name _;
                root /var/www/html/current/public;
                index index.php index.html index.htm;
                
                location / {
                    try_files \$uri \$uri/ /index.php?\$query_string;
                }
                
                location ~ \.php$ {
                    include snippets/fastcgi-php.conf;
                    fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
                    fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
                    include fastcgi_params;
                }
                
                location ~ /\.(?!well-known).* {
                    deny all;
                }
            }
            NGINX
            
            sudo nginx -t
            
            # 12. サービス再起動
            echo ""
            echo "=== Step 12: Restart Services ==="
            sudo systemctl restart php8.3-fpm
            sudo systemctl restart nginx
            
            # 13. 動作確認
            echo ""
            echo "=== Step 13: Verification ==="
            sleep 3
            
            echo "Checking login page:"
            curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://localhost/admin/login
            
            echo ""
            echo "Checking Livewire:"
            curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://localhost/livewire/livewire.min.js
            
            echo ""
            echo "Checking database connection:"
            sudo -u www-data php artisan tinker --execute="
              echo 'Users count: ' . \App\Models\User::count();
            "
            
            echo ""
            echo "================================"
            echo "CLEAN INSTALLATION COMPLETE!"
            echo "================================"
            echo "URL: http://13.115.38.179/admin/login"
            echo "Email: admin@xsyumeno.com"
            echo "Password: password"
            echo "================================"
          SSHEOF
          
          rm key.pem