name: Deploy Simple

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Simple Deploy
      env:
        EC2_KEY: ${{ secrets.EC2_KEY }}
        EC2_HOST: 54.64.54.226
        EC2_USER: ubuntu
      run: |
        echo "$EC2_KEY" > deploy_key.pem
        chmod 600 deploy_key.pem
        
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=60 -i deploy_key.pem ${EC2_USER}@${EC2_HOST} << 'DEPLOY'
        set -e
        APP_DIR="/var/www/html"
        
        echo "=== Simple Deploy ==="

        # ファイルシステムを拡張
        echo "=== Extending filesystem ==="
        sudo growpart /dev/nvme0n1 1 || true
        sudo resize2fs /dev/nvme0n1p1 || true
        df -h

        # Git clone
        cd /tmp
        rm -rf metore_system
        git clone https://github.com/Naoki-Takahashi0420/metore_system.git

        # バージョン情報を記録
        cd /tmp/metore_system
        git rev-parse --short HEAD > .version
        echo "Version: $(cat .version)"

        # Backup database if exists
        if [ -f "$APP_DIR/database/database.sqlite" ]; then
          sudo cp $APP_DIR/database/database.sqlite /tmp/database-backup.sqlite
          echo "Database backed up"
        fi
        
        # Backup .env if exists
        if [ -f "$APP_DIR/.env" ]; then
          sudo cp $APP_DIR/.env /tmp/.env-backup
          echo ".env backed up"
        fi
        
        # Deploy (preserve storage, database, and .env)
        sudo find $APP_DIR -mindepth 1 \
          -not -path "$APP_DIR/storage*" \
          -not -path "$APP_DIR/database/database.sqlite" \
          -not -path "$APP_DIR/database" \
          -not -path "$APP_DIR/.env" \
          -delete
        
        sudo cp -r /tmp/metore_system/* $APP_DIR/
        
        # Restore database if backed up
        if [ -f "/tmp/database-backup.sqlite" ]; then
          sudo cp /tmp/database-backup.sqlite $APP_DIR/database/database.sqlite
          echo "Database restored"
        fi
        
        # Restore .env if backed up (or create if not exists)
        if [ -f "/tmp/.env-backup" ]; then
          sudo cp /tmp/.env-backup $APP_DIR/.env
          echo ".env restored"
        elif [ ! -f "$APP_DIR/.env" ]; then
          # Create .env only if it doesn't exist
          echo "WARNING: .env file not found. Please create it manually."
        fi

        # LINE_TEST_USER_IDを.envに追加（.env復元後に実行）
        echo "Checking LINE_TEST_USER_ID in .env..."
        if ! grep -q "LINE_TEST_USER_ID" $APP_DIR/.env 2>/dev/null; then
          echo "Adding LINE_TEST_USER_ID to .env..."
          echo "" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "# LINE Test User ID (開発者用)" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "LINE_TEST_USER_ID=Uc37e9137beadca4a6d5c04aaada19ab1" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "✅ LINE_TEST_USER_ID added to .env"
        else
          echo "✅ LINE_TEST_USER_ID already exists in .env"
        fi

        # AWS SNS設定を.envに追加
        echo "Checking AWS SNS settings in .env..."
        if ! grep -q "AWS_ACCESS_KEY_ID" $APP_DIR/.env 2>/dev/null; then
          echo "Adding AWS SNS settings to .env..."
          echo "" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "# AWS SNS (SMS送信用)" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "AWS_DEFAULT_REGION=ap-northeast-1" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "SMS_ENABLED=true" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "SMS_FROM_NAME=METORE" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "✅ AWS SNS settings added to .env"
        else
          echo "✅ AWS SNS settings already exist in .env"
        fi

        # セッション有効期限を30日に延長（2段階認証問題の解決）
        echo "Checking SESSION_LIFETIME in .env..."
        if grep -q "SESSION_LIFETIME" $APP_DIR/.env 2>/dev/null; then
          echo "Updating SESSION_LIFETIME to 30 days (43200 minutes)..."
          sudo sed -i 's/SESSION_LIFETIME=.*/SESSION_LIFETIME=43200/' $APP_DIR/.env
          echo "✅ SESSION_LIFETIME updated to 43200 minutes (30 days)"
        else
          echo "Adding SESSION_LIFETIME to .env..."
          echo "" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "# Session lifetime (30 days = 43200 minutes)" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "SESSION_LIFETIME=43200" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "✅ SESSION_LIFETIME added to .env"
        fi

        # ログローテーション設定（7日分のログのみ保持）
        echo "Checking LOG_CHANNEL in .env..."
        if grep -q "LOG_CHANNEL" $APP_DIR/.env 2>/dev/null; then
          echo "Updating LOG_CHANNEL to daily..."
          sudo sed -i 's/LOG_CHANNEL=.*/LOG_CHANNEL=daily/' $APP_DIR/.env
          echo "✅ LOG_CHANNEL updated to daily"
        else
          echo "Adding LOG_CHANNEL to .env..."
          echo "" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "# Log rotation (auto-delete logs older than 7 days)" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "LOG_CHANNEL=daily" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "✅ LOG_CHANNEL added to .env"
        fi

        echo "Checking LOG_DAILY_DAYS in .env..."
        if grep -q "LOG_DAILY_DAYS" $APP_DIR/.env 2>/dev/null; then
          echo "Updating LOG_DAILY_DAYS to 7..."
          sudo sed -i 's/LOG_DAILY_DAYS=.*/LOG_DAILY_DAYS=7/' $APP_DIR/.env
          echo "✅ LOG_DAILY_DAYS updated to 7"
        else
          echo "Adding LOG_DAILY_DAYS to .env..."
          echo "LOG_DAILY_DAYS=7" | sudo tee -a $APP_DIR/.env > /dev/null
          echo "✅ LOG_DAILY_DAYS added to .env"
        fi

        # SQLiteデータベース設定（新規作成しない）
        cd $APP_DIR
        if [ ! -f "database/database.sqlite" ]; then
          sudo touch database/database.sqlite
          echo "Created new database file"
        fi
        sudo chown www-data:www-data database/database.sqlite
        sudo chmod 664 database/database.sqlite

        # Composer
        sudo COMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader

        # 権限設定（キャッシュ操作の前に実行）
        sudo chown -R www-data:www-data $APP_DIR
        sudo chmod -R 755 $APP_DIR
        [ -d "$APP_DIR/storage" ] && sudo chmod -R 775 $APP_DIR/storage
        [ -d "$APP_DIR/bootstrap/cache" ] && sudo chmod -R 775 $APP_DIR/bootstrap/cache
        [ -d "$APP_DIR/database" ] && sudo chmod -R 775 $APP_DIR/database

        # Laravel設定（.envファイルは既存のものを使用）
        # sudo php artisan key:generate はコメントアウト（既存のキーを使用）
        sudo php artisan storage:link
        sudo php artisan optimize:clear
        sudo php artisan view:clear
        sudo php artisan cache:clear
        sudo php artisan migrate --force
        # route:cacheはFilamentと相性が悪いため使用しない
        sudo php artisan config:cache
        
        # Filamentアセットを公開
        sudo php artisan filament:assets
        sudo php artisan vendor:publish --tag=filament-panels-assets --force
        sudo php artisan vendor:publish --tag=filament-support-assets --force

        # FullCalendarアセットを公開
        sudo php artisan vendor:publish --tag=filament-fullcalendar-assets --force
        
        # Livewire設定を公開（Filamentのログイン用）
        sudo php artisan livewire:publish --config
        sudo php artisan livewire:publish --assets
        
        # Livewireアセットのシンボリックリンク作成
        cd $APP_DIR/public
        sudo ln -sf vendor/livewire livewire
        cd $APP_DIR
        
        # 管理者ユーザー作成
        sudo tee create_admin.php > /dev/null << 'PHP'
        <?php
        require_once __DIR__.'/vendor/autoload.php';
        $app = require_once __DIR__.'/bootstrap/app.php';
        $kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);
        $response = $kernel->handle($request = Illuminate\Http\Request::capture());
        
        use App\Models\User;
        use Illuminate\Support\Facades\Hash;
        
        $user = User::firstOrCreate(
            ['email' => 'admin@eye-training.com'],
            [
                'name' => 'Administrator',
                'password' => Hash::make('password'),
                'role' => 'superadmin',
                'is_active' => true,
                'email_verified_at' => now()
            ]
        );
        
        echo "Admin user ready: " . $user->email . "\n";
        PHP
        
        sudo php create_admin.php
        sudo rm create_admin.php

        # 既存シフトのカテゴリーを更新
        if [ -f "$APP_DIR/update_shift_categories.php" ]; then
          echo "=== Updating shift categories ==="
          sudo php $APP_DIR/update_shift_categories.php || echo "Category update completed"
        fi

        # 既存ユーザーに色を割り当て
        echo "=== Assigning colors to users ==="
        sudo php artisan users:assign-colors || echo "User color assignment completed"

        # 既存カテゴリーに色を割り当て
        echo "=== Assigning colors to categories ==="
        sudo php artisan categories:assign-colors || echo "Category color assignment completed"

        # 権限設定
        sudo chown -R www-data:www-data $APP_DIR
        sudo chmod -R 755 $APP_DIR
        [ -d "$APP_DIR/storage" ] && sudo chmod -R 775 $APP_DIR/storage
        [ -d "$APP_DIR/bootstrap/cache" ] && sudo chmod -R 775 $APP_DIR/bootstrap/cache
        [ -d "$APP_DIR/database" ] && sudo chmod -R 775 $APP_DIR/database
        
        # アップロード用ディレクトリ作成
        sudo mkdir -p $APP_DIR/storage/app/public/stores
        sudo mkdir -p $APP_DIR/storage/app/public/livewire-tmp
        sudo mkdir -p $APP_DIR/storage/app/livewire-tmp
        sudo chown -R www-data:www-data $APP_DIR/storage
        sudo chmod -R 775 $APP_DIR/storage

        # キューワーカー用ログファイル作成（権限設定直後に実行）
        sudo touch $APP_DIR/storage/logs/queue-worker.log
        sudo chown www-data:www-data $APP_DIR/storage/logs/queue-worker.log
        sudo chmod 664 $APP_DIR/storage/logs/queue-worker.log

        # Laravelスケジューラーのcron設定（www-dataユーザーで実行）
        echo "=== Setting up Laravel Scheduler ==="
        # 既存のLaravelスケジューラーcronを削除（root側）
        (sudo crontab -l 2>/dev/null | grep -v "artisan schedule:run" || true) | sudo crontab -
        # 既存のLaravelスケジューラーcronを削除（www-data側）
        (sudo crontab -u www-data -l 2>/dev/null | grep -v "artisan schedule:run" || true) | sudo crontab -u www-data -
        # 新しいcronエントリを追加（www-dataユーザーで実行）
        (sudo crontab -u www-data -l 2>/dev/null; echo "* * * * * cd /var/www/html && /usr/bin/php artisan schedule:run >> /dev/null 2>&1") | sudo crontab -u www-data -
        sudo crontab -u www-data -l | grep "schedule:run"
        echo "✅ Scheduler cron configured for www-data user (fixes daily log permission issue)"

        # キューワーカーの起動（バックグラウンド）
        echo "=== Starting Queue Worker ==="
        # 既存のキューワーカーを確実に停止
        echo "Stopping existing queue workers..."
        sudo pkill -f "artisan queue:work" || true
        # プロセスが完全に終了するまで待つ
        sleep 3
        # まだ残っている場合は強制終了
        if pgrep -f "artisan queue:work" > /dev/null; then
          echo "⚠️ Warning: Queue workers still running, forcing kill..."
          sudo pkill -9 -f "artisan queue:work" || true
          sleep 2
        fi
        # 最終確認
        REMAINING=$(pgrep -f "artisan queue:work" | wc -l)
        echo "Remaining queue workers: $REMAINING"
        # 新しいキューワーカーを1つだけ起動（www-dataユーザーで実行）
        cd $APP_DIR
        sudo -u www-data bash -c "nohup php artisan queue:work --tries=3 --timeout=90 >> $APP_DIR/storage/logs/queue-worker.log 2>&1 &"
        sleep 1
        # 起動確認
        RUNNING=$(pgrep -f "artisan queue:work" | wc -l)
        echo "✅ Queue worker started (running: $RUNNING)"
        # ログ確認
        if [ -f "$APP_DIR/storage/logs/queue-worker.log" ]; then
          echo "Queue worker log file created successfully"
          ls -lah $APP_DIR/storage/logs/queue-worker.log
        fi

        # サービス再起動
        sudo systemctl restart nginx php8.3-fpm

        echo "=== Deploy Complete ==="
        curl -I http://localhost/
        DEPLOY
        
        rm deploy_key.pem
        
        echo "✅ Deploy Success!"
        echo "URL: https://reservation.meno-training.com/"
        echo "Admin: https://reservation.meno-training.com/admin/login"
        echo "Email: admin@eye-training.com"
        echo "Password: password"