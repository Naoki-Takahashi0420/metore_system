name: Deploy Simple

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Simple Deploy
      env:
        EC2_KEY: ${{ secrets.EC2_KEY }}
        EC2_HOST: 54.64.54.226
        EC2_USER: ubuntu
      run: |
        echo "$EC2_KEY" > deploy_key.pem
        chmod 600 deploy_key.pem
        
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=60 -i deploy_key.pem ${EC2_USER}@${EC2_HOST} << 'DEPLOY'
        set -e
        APP_DIR="/var/www/html"
        
        echo "=== Simple Deploy ==="

        # ファイルシステムを拡張
        echo "=== Extending filesystem ==="
        sudo growpart /dev/nvme0n1 1 || true
        sudo resize2fs /dev/nvme0n1p1 || true
        df -h

        # Git clone
        cd /tmp
        rm -rf metore_system
        git clone https://github.com/Naoki-Takahashi0420/metore_system.git

        # バージョン情報を記録
        cd /tmp/metore_system
        git rev-parse --short HEAD > .version
        echo "Version: $(cat .version)"

        # Backup database if exists
        if [ -f "$APP_DIR/database/database.sqlite" ]; then
          sudo cp $APP_DIR/database/database.sqlite /tmp/database-backup.sqlite
          echo "Database backed up"
        fi
        
        # Backup .env if exists
        if [ -f "$APP_DIR/.env" ]; then
          sudo cp $APP_DIR/.env /tmp/.env-backup
          echo ".env backed up"
        fi
        
        # Deploy (preserve storage, database, and .env)
        sudo find $APP_DIR -mindepth 1 \
          -not -path "$APP_DIR/storage*" \
          -not -path "$APP_DIR/database/database.sqlite" \
          -not -path "$APP_DIR/database" \
          -not -path "$APP_DIR/.env" \
          -delete
        
        sudo cp -r /tmp/metore_system/* $APP_DIR/
        
        # Restore database if backed up
        if [ -f "/tmp/database-backup.sqlite" ]; then
          sudo cp /tmp/database-backup.sqlite $APP_DIR/database/database.sqlite
          echo "Database restored"
        fi
        
        # Restore .env if backed up (or create if not exists)
        if [ -f "/tmp/.env-backup" ]; then
          sudo cp /tmp/.env-backup $APP_DIR/.env
          echo ".env restored"
        elif [ ! -f "$APP_DIR/.env" ]; then
          # Create .env only if it doesn't exist
          echo "WARNING: .env file not found. Please create it manually."
        fi
        
        # SQLiteデータベース設定（新規作成しない）
        cd $APP_DIR
        if [ ! -f "database/database.sqlite" ]; then
          sudo touch database/database.sqlite
          echo "Created new database file"
        fi
        sudo chown www-data:www-data database/database.sqlite
        sudo chmod 664 database/database.sqlite
        
        # Composer
        sudo COMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader
        
        # Laravel設定（.envファイルは既存のものを使用）
        # sudo php artisan key:generate はコメントアウト（既存のキーを使用）
        sudo php artisan storage:link
        sudo php artisan optimize:clear
        sudo php artisan view:clear
        sudo php artisan cache:clear
        sudo php artisan migrate --force
        # route:cacheはFilamentと相性が悪いため使用しない
        sudo php artisan config:cache
        
        # Filamentアセットを公開
        sudo php artisan filament:assets
        sudo php artisan vendor:publish --tag=filament-panels-assets --force
        sudo php artisan vendor:publish --tag=filament-support-assets --force

        # FullCalendarアセットを公開
        sudo php artisan vendor:publish --tag=filament-fullcalendar-assets --force
        
        # Livewire設定を公開（Filamentのログイン用）
        sudo php artisan livewire:publish --config
        sudo php artisan livewire:publish --assets
        
        # Livewireアセットのシンボリックリンク作成
        cd $APP_DIR/public
        sudo ln -sf vendor/livewire livewire
        cd $APP_DIR
        
        # 管理者ユーザー作成
        sudo tee create_admin.php > /dev/null << 'PHP'
        <?php
        require_once __DIR__.'/vendor/autoload.php';
        $app = require_once __DIR__.'/bootstrap/app.php';
        $kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);
        $response = $kernel->handle($request = Illuminate\Http\Request::capture());
        
        use App\Models\User;
        use Illuminate\Support\Facades\Hash;
        
        $user = User::firstOrCreate(
            ['email' => 'admin@eye-training.com'],
            [
                'name' => 'Administrator',
                'password' => Hash::make('password'),
                'role' => 'superadmin',
                'is_active' => true,
                'email_verified_at' => now()
            ]
        );
        
        echo "Admin user ready: " . $user->email . "\n";
        PHP
        
        sudo php create_admin.php
        sudo rm create_admin.php

        # 既存シフトのカテゴリーを更新
        if [ -f "$APP_DIR/update_shift_categories.php" ]; then
          echo "=== Updating shift categories ==="
          sudo php $APP_DIR/update_shift_categories.php || echo "Category update completed"
        fi

        # 既存ユーザーに色を割り当て
        echo "=== Assigning colors to users ==="
        sudo php artisan users:assign-colors || echo "User color assignment completed"

        # 既存カテゴリーに色を割り当て
        echo "=== Assigning colors to categories ==="
        sudo php artisan categories:assign-colors || echo "Category color assignment completed"

        # 権限設定
        sudo chown -R www-data:www-data $APP_DIR
        sudo chmod -R 755 $APP_DIR
        [ -d "$APP_DIR/storage" ] && sudo chmod -R 775 $APP_DIR/storage
        [ -d "$APP_DIR/bootstrap/cache" ] && sudo chmod -R 775 $APP_DIR/bootstrap/cache
        [ -d "$APP_DIR/database" ] && sudo chmod -R 775 $APP_DIR/database
        
        # アップロード用ディレクトリ作成
        sudo mkdir -p $APP_DIR/storage/app/public/stores
        sudo mkdir -p $APP_DIR/storage/app/public/livewire-tmp
        sudo mkdir -p $APP_DIR/storage/app/livewire-tmp
        sudo chown -R www-data:www-data $APP_DIR/storage
        sudo chmod -R 775 $APP_DIR/storage
        
        # サービス再起動
        sudo systemctl restart nginx php8.3-fpm
        
        echo "=== Deploy Complete ==="
        curl -I http://localhost/
        DEPLOY
        
        rm deploy_key.pem
        
        echo "✅ Deploy Success!"
        echo "URL: https://reservation.meno-training.com/"
        echo "Admin: https://reservation.meno-training.com/admin/login"
        echo "Email: admin@eye-training.com"
        echo "Password: password"